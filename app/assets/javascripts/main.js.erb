//= depend_on_asset proposals.html
//= depend_on_asset proposal.html
//= depend_on_asset voting_buttons.html

// This file contains services and directives used throughout the project.
// Also the routes are defined here.

// initialize the app and pollute the global namespace
var glasatni = angular.module('glasatni', ['ngResource', 'ngRoute', 'ui.bootstrap']);

// hopefully you know when this is executed
// hint: when the app is bootstrapped
glasatni.run(["$rootScope", "$window", "$location", "AuthService", function($rootScope, $window, $location, AuthService) {

  // this handles page hopping statistics for google analytics.
  // on every successful route change -> send data to google
  $rootScope.$on('$locationChangeSuccess', function() {
    if ($window.ga) {
      $window.ga('send', 'pageview', { page: $location.path() });
    }
  });

  // we need to fetch the user from server on every page refresh
  // as the app doesn't store this information anywhere and therefore
  // it is lost.
  AuthService.getUserFromServer();

}]);

// configuration for the application
glasatni.config(['$routeProvider', "$locationProvider", function($routeProvider, $locationProvider) {

  // We use the angular core's routes (not the ui.routes module) and
  // they don't support states. This is the reason we define options for
  // different proposals-related routes here and reuse them 3 time later on.
  var proposalsOptions = {
    controller: "ProposalIndexController",
    templateUrl: "<%= asset_path('proposals.html') %>",
    resolve: { data: ProposalIndexController.loadProposals }
  };

  var referendumOptions = {
    controller: "ThemeIndexController",
    templateUrl: "<%= asset_path('home.html') %>",
    resolve: { data: ["$rootScope", "$route", "AuthService", "Proposal", function($rootScope, $route, AuthService, Proposal) {

      // perhaps a ParamsService is needed
      $rootScope.params = {
        theme: "referendum",
        order: "newest",
        page: 1
      };

      // Only fetch proposals when we know whether or not the user is authorized on the server.
      // Otherwise a race condition is happening on page reload: the proposals can be fetched before we have information
      // about the user (All this is needed, because moderators and regulars have different proposal listings. ;_;)
      return AuthService.userIsFetchedFromServer.then(function() {

        // check if user is logged in and fetch id if so.
        if (AuthService.getUser()) {
          $rootScope.params.voter_id = AuthService.getUser().id;
        }

        // fetch proposals
        return Proposal.query($rootScope.params).$promise.then(function(data) {
          return data;
        });

      });

    }]}
  }

  $locationProvider.html5Mode(true);

  $routeProvider

  // home
  .when("/", $.extend(referendumOptions, {
    // This redirection is needed to switch from rails to angular.
    // In rails' routes we catch all angular routes and pass them
    // with the 'goto' parameter. Then, the string is handled by this
    // function. It simply gets the string (if present) and redirects
    // to the new address.
    redirectTo: function(current, path, search) {
      return "/" + search.goto ? search.goto : "";
    }
  }))
  .when("/referendum/:order", referendumOptions)
  .when("/referendum/:order/:page", referendumOptions)

  // proposals
  .when("/proposals", proposalsOptions)
  .when("/proposals/theme/:theme/:order", proposalsOptions)
  .when("/proposals/theme/:theme/:order/:page", proposalsOptions)
  .when("/proposals/new", {
    controller: "ProposalCreateController",
    templateUrl: "<%= asset_path('proposal_form.html') %>" })
  .when("/proposals/:id", {
    controller: "ProposalShowController",
    templateUrl: "<%= asset_path('proposal.html') %>" })
  .when("/proposals/:id/edit", {
    controller: "ProposalEditController",
    templateUrl: "<%= asset_path('proposal_form.html') %>" })

  // users
  .when("/users/:id", {
    controller: "UserShowController",
    templateUrl: "<%= asset_path('user.html') %>" })

  // themes
  .when("/themes/:id", {
    controller: "ThemeShowController",
    templateUrl: "<%= asset_path('theme.html') %>" })

  // notifications
  .when("/notifications", {
    controller: "NotificationIndexController",
    templateUrl: "<%= asset_path('notifications.html') %>" })

  // ranks
  .when("/ranks/:rank", {
    controller: "UserIndexController",
    templateUrl: "<%= asset_path('rank.html') %>" })

  // login
  .when("/login", {
    controller: "LoginController",
    templateUrl: "<%= asset_path('login.html') %>" })

  // register
  .when("/register", {
    controller: "RegisterController",
    templateUrl: "<%= asset_path('options.html') %>" })

  // options
  .when("/options", {
    controller: "OptionsController",
    templateUrl: "<%= asset_path('options.html') %>",
    resolve: { user: OptionsController.loadUser }})

  // about
  .when("/about", {
    templateUrl: "<%= asset_path('about.html') %>" })

  // about
  .when("/legal", {
    templateUrl: "<%= asset_path('legal.html') %>" })

  // TODO show 404 error page
  .otherwise({
    redirectTo: "/proposals" });

}]);

glasatni.filter('translateOrder', [function () {
  "use strict";
  return function (string) {
    var translations = {
      "newest": "Най-нови",
      "oldest": "Най-стари",
      "relevance": "Най-подкрепени",
      "most-comments": "Коментирани",
      "least-comments": "Некоментирани"
    };
    return translations[string];
  };
}]);

glasatni.filter('translateRank', [function () {
  "use strict";
  return function (string) {
    var translations = {
      "observer": "Наблюдател",
      "speaker": "Говорител",
      "orator": "Оратор",
      "enthusiast": "Ентусиаст",
      "activist": "Активист",
      "policy_maker": "Полиси мейкър"
    };
    return translations[string];
  };
}]);

// Counts the words in the passed string with a simple regex.
// Used when editing/creating proposals.
glasatni.filter('countWords', [function() {
  "use strict";
  return function(string) {
    if (typeof string === "undefined" || string === "") {
      return 0;
    }
    return string.split(/\s+/).length;
  };
}]);

// voting buttons
glasatni.directive('votingButtons', ['Proposal', 'Comment', 'Modal', 'AuthService', function(Proposal, Comment, Modal, AuthService) {
  return {
    restrict: 'E',
    scope: {
      votable: "=",
      votableType: "@",
      buttonSize: "=?"
    },
    controller: ['$scope', function($scope) {
      $scope.buttonSize = $scope.buttonSize || 'btn-sm';
    }],
    link: function (scope) {

      scope.vote = function(value) {
        var direction = value === 0 ? "up": "down";
        var params = { id: scope.votable.id, vote: direction, votable: scope.votableType };
        var success = function(response) {
          scope.votable.hotness = response.hotness;
          scope.votable.up = response.up;
          scope.votable.down = response.down;
          scope.votable.voted = scope.votable.voted === value ? -1 : value;
        };
        var failure = function(response) {
          if (response.statusText == "Unauthorized") {
            Modal.open("unregisteredVote");
          } else {
            Modal.open("unknownError");
          }
        };

        if (AuthService.getUser()) {
          if (scope.votableType === "proposal") {
            Proposal.vote(params).$promise.then(success, failure);
          } else {
            Comment.vote(params).$promise.then(success, failure);
          }
        } else {
          Modal.open("unregisteredVote");
        }

      }

    },
    templateUrl: "<%= asset_path('voting_buttons.html') %>"
  };
}]);

// This service is a wrapper of the ui.bootstrap's $modal service.
// The 'open' method returns a promise which is fulfilled when the
// user clicks 'ok' (blue) and rejected when he/she clicks 'cancel' (white)
glasatni.service('Modal', ['$modal', function($modal) {

  var texts = {
    unknownError: {
      title: "Опа!",
      body: "Изглежда тази операция не работи за сега. Моля да ни извините!",
      okButton: "От мен да мине.",
      cancelButton: "Скрий"
    },
    unregisteredVote: {
      title: "Чакай малко!",
      body: "Само регистрирани потребители могат да гласуват.",
      okButton: "Ясно, разбрах.",
      cancelButton: "Скрий"
    },
    unregisteredCreateProposal: {
      title: "Чакай малко!",
      body: "Само регистрирани потребители могат да правят предложения.",
      okButton: "Ясно, разбрах.",
      cancelButton: "Скрий"
    },
    unauthorizedUpdateProposal: {
      title: "Чакай малко!",
      body: "Нямате права да променяте това предложениe.",
      okButton: "Упс.",
      cancelButton: "Скрий"
    },
    destroyComment: {
      title: "Бърз въпрос.",
      body: "Този коментар нещо не ти харесва. Ще го изтриеш ли?",
      okButton: "Вярно е, не ми харесва.",
      cancelButton: "Нека живее."
    },
    destroyProposal: {
      title: "Бърз въпрос.",
      body: "Абе, сигурен(на) ли си, че искаш да изтриеш това предложение?",
      okButton: "Ами да.",
      cancelButton: "Не, размислих."
    },
    proposalNotFound: {
      title: "Странно",
      body: "Не можем да намерим това предложение. Сигурен/на ли си, че си на правилния адрес? За твоята безопасност, ще те пренасочим към всички предложения.",
      okButton: "Добре",
      cancelButton: "Имам ли избор..."
    }
  };

  this.open = function(msgKey) {
    return $modal.open({
      templateUrl: "<%= asset_path('modal.html') %>",
      controller: ["$scope", function($scope) {
        $scope.text = texts[msgKey];
      }]
    }).result;
  }

}]);

// this very simple directive has only one function -
// listen for changes in the given string and update it
// converting with the 'showdown' library.
glasatni.directive('markdown', [function() {
  var converter = new Showdown.converter();

  return {
    restrict: 'E',
    scope: {
      content: "="
    },
    link: function(scope, element) {
      if (typeof scope.content !== "undefined") {
        element.html(converter.makeHtml(scope.content));
      }

      scope.$watch('content', function(newValue, oldValue) {
        if (newValue === oldValue) return;
        element.html(converter.makeHtml(scope.content));
      });
    }
  }
}]);

// The 'more' button is a directive that collects more of comments/proposals/users
glasatni.directive("moreButton", ["Comment", "Proposal", "Notification", "User", "Modal", function(Comment, Proposal, Notification, User, Modal) {
  return {
    restrict: "E",
    scope: {
      collection: "=",
      collectionType: "@",
      order: "@",
      userId: "@",
      rank: "@",
      nextPage: "@"
    },
    template: "<button class='btn btn-default' ng-disabled='disabled' ng-click='getMore()'>{{ text }}</button>",
    link: function(scope, element) {

      scope.disabled = false;
      scope.text = "Дай ОЩЕ!";

      var success = function(response) {
        scope.collection = scope.collection.concat(response[scope.collectionType+"s"]);

        scope.disabled = false;
        scope.text = "Дай ОЩЕ!";
        scope.nextPage = parseInt(scope.nextPage) + 1;
      };

      var failure = function() {
        Modal.open('unknownError');
      };

      scope.getMore = function() {
        var params = {
          page: scope.nextPage
        };
        var Moreable;

        if (typeof scope.userId !== "undefined") {
          params.user_id = scope.userId;
        }
        if (typeof scope.rank !== "undefined") {
          params.rank = scope.rank;
        }

        scope.disabled = true;
        scope.text = "Пуф Паф!";

        Moreable =
          scope.collectionType === "proposal"      ? Proposal :
          scope.collectionType === "comment"       ? Comment :
          scope.collectionType === "notification"  ? Notification :
          /* else */                                 User;

        Moreable.query(params).$promise.then(success, failure);
      }

    }
  }
}]);

// flag button is used for flagging comments and proposals
glasatni.directive("flagButton", ["Comment", "Proposal", "Modal", function(Comment, Proposal, Modal) {
  return {
    restrict: "E",
    templateUrl: "<%= asset_path('flag_button.html') %>",
    scope: {
      flaggable: "=",
      type: "@",
      size: "@"
    },
    link: function(scope) {
      scope.flag = function(flaggable, reason) {
        var Flaggable = scope.type === "proposal" ? Proposal : Comment;
        Flaggable.flag({ flaggable_id: flaggable.id, reason: reason, flaggable_type: scope.type }).$promise.then(function(data) {
          flaggable.alerts = [{
            type: "success", msg: "Вие докладвахте този коментар. Благодарим ви."
          }];
        }, function() { Modal.open("unknownError") });
      }
    }
  }
}]);

// The 'order by' dropdown.
// I have mixed feelings about this directive. I haven't figured
// out yet whether or not it adds complexity or reduces it.
glasatni.directive("filter", [function() {

  return {
    restrict: "E",
    templateUrl: "<%= asset_path('filter.html') %>",
    transclude: true,
    scope: {
      order: "="
    }
  }

}]);

// The service is just a container for alerts with 4 simple methods
glasatni.service("messageService", [function() {

  var _container = [];

  this.push = function(msgOb) {
    _container.push(msgOb);
  };

  this.removeByIndex = function(idx) {
    _container.splice(idx, 1);
  };

  this.removeByLocation = function(destination) {
    _container = _container.filter(function(msg) { return msg.destination !== destination });
  };

  this.get = function(destination) {
    return _container.filter(function(msg) { return msg.destination === destination });
  };

}]);

// The directive is just a convenient way to "stick" the appropriate messages to the right place
// One can think of it as a way to give a ui to the messageService
glasatni.directive("displayMessages", ["messageService", function(messageService) {

  return {
    restrict: "E",
    template: "<alert ng-repeat='alert in messageService.get(destination)' type='{{ alert.type }}' close='messageService.removeByIndex($index)'>" +
              "{{ alert.msg }}" +
              "</alert>",
    scope: {
      destination: "@"
    },
    link: function(scope) {
      scope.messageService = messageService;
    }
  };

}]);

// This directive handles business logic for the statuses
glasatni.directive("proposalStatuses", [function() {

  return {
    restrict: "E",
    templateUrl: "<%= asset_path('statuses.html') %>",
    scope: {
      proposal: "="
    },
    link: function(scope) {

      // Let's store the data for the visualization of the statuses in this variable:
      var statusValues = {
        created: {
          message: "Предложението е създадено",
          icon: "heartbeat",
          style: "primary",
          percentage: 15
        },
        approved: {
          message: "Предложението е в процес на обсъждане. Можеш да го подкрепиш, да не го харесаш или да го коментираш.",
          icon: "plane",
          style: "primary",
          percentage: 30
        },
        submitted: {
          message: "Предложението е внесено за обсъждане.",
          icon: "book",
          style: "success",
          percentage: 50
        },
        not_submitted: {
          message: "Предложението не e внесено за обсъждане поради следната причина:",
          icon: "question",
          style: "danger",
          percentage: 30
        },
        rejected_no_reason: {
          message: "Предложението беше отхвърлено без да е дадена причина.",
          icon: "times-circle",
          style: "danger",
          percentage: 60
        },
        rejected_with_reason: {
          message: "Предложението беше отхвърлено поради следната причина: ",
          icon: "times-circle",
          style: "danger",
          percentage: 70
        },
        accepted: {
          message: "Предложението беше прието.",
          icon: "check-square",
          style: "success",
          percentage: 90
        },
        in_force: {
          message: "Предложението е влязло в сила.",
          icon: "magic",
          style: "success",
          percentage: 100
        }
      };

      scope.showAllStatuses = function() {
        scope.proposal.statuses.map(function(s) { return s.show = true });
      };

      scope.hideAllButLastStatuses = function() {
        scope.proposal.statuses.map(function(s) { return s.show = false });
        scope.proposal.statuses[scope.proposal.statuses.length - 1].show = true;
      }

      // Fire up only when proposal is loaded. This is needed, because otherwise
      // a race condition occurs where angular attempts to render the element before
      // the proposal's statuses are loaded.
      scope.$watch("proposal", function(newValue, oldValue) {
        var lastStatus;

        // Evaluate the bussiness logic only on initialization, not every time the proposal
        // object has changed.
        if (newValue) {

          // Assign the first status. This is not a real status, because we don't store it as
          // such in the database. It is just a status for the UI.
          scope.proposal.statuses.unshift({
            kind: "created",
            time_ago: scope.proposal.time_ago
          });

          // Assign the corresponding values for the statuses
          scope.proposal.statuses.map(function(s) {
            return angular.extend(s, statusValues[s.kind], { show: false });
          });

          // Get the last status and mark it for showing.
          lastStatus = scope.proposal.statuses[scope.proposal.statuses.length - 1];
          lastStatus.show = true;

          // Assign the corresponding values for the progress bar.
          scope.progress = {
            percentage: statusValues[lastStatus.kind]['percentage'],
            style: statusValues[lastStatus.kind]['style']
          };

        }
      });

    }
  }
}]);

