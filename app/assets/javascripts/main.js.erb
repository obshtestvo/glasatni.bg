//= depend_on_asset proposals.html
//= depend_on_asset proposal.html
//= depend_on_asset voting_buttons.html

// This file contains services and directives used throughout the project as well as
// the routes.

var promeni = angular.module('promeni', ['ngResource', 'ngRoute', 'ui.bootstrap']);

promeni.config(['$routeProvider', function($routeProvider) {

  var proposalsOptions = {
    controller: "ProposalIndexController",
    templateUrl: "<%= asset_path('proposals.html') %>",
    resolve: {
      data: ProposalIndexController.loadProposals
    }
  };

  $routeProvider

  // home
  .when("/", {
    controller: "ThemeIndexController",
    templateUrl: "<%= asset_path('home.html') %>" })

  // proposals
  .when("/proposals", proposalsOptions)
  .when("/proposals/theme/:theme/:order", proposalsOptions)
  .when("/proposals/theme/:theme/:order/:page", proposalsOptions)
  .when("/proposals/new", {
    controller: "ProposalCreateController",
    templateUrl: "<%= asset_path('proposal_form.html') %>" })
  .when("/proposals/:id", {
    controller: "ProposalShowController",
    templateUrl: "<%= asset_path('proposal.html') %>" })
  .when("/proposals/:id/edit", {
    controller: "ProposalEditController",
    templateUrl: "<%= asset_path('proposal_form.html') %>" })

  // users
  .when("/users/:id", {
    controller: "UserShowController",
    templateUrl: "<%= asset_path('user.html') %>" })

  // themes
  .when("/themes/:id", {
    controller: "ThemeShowController",
    templateUrl: "<%= asset_path('theme.html') %>" })

  // ranks
  .when("/ranks/:rank", {
    controller: "UserIndexController",
    templateUrl: "<%= asset_path('rank.html') %>" })

  // about
  .when("/about", {
    templateUrl: "<%= asset_path('about.html') %>" })

  // 404
  // TODO show 404 error page
  .otherwise({
    redirectTo: "/proposals" });

}]);

promeni.filter('translateOrder', [function () {
  "use strict";
  return function (string) {
    var translations = {
      "newest": "Най-нови",
      "oldest": "Най-стари",
      "relevance": "Най-подкрепени",
      "most-comments": "Коментирани",
      "least-comments": "Некоментирани"
    }
    return translations[string];
  };
}]);

promeni.filter('translateRank', [function () {
  "use strict";
  return function (string) {
    var translations = {
      "observer": "Наблюдател",
      "speaker": "Говорител",
      "orator": "Оратор",
      "enthusiast": "Ентусиаст",
      "activist": "Активист",
      "policy_maker": "Полиси мейкър"
    }
    return translations[string];
  };
}]);

promeni.filter('translateTheme', [function () {
  "use strict";
  return function (value) {
    var translations = {
      "education": "Гражданско образование",
      "volunteering": "Доброволчество",
      "meta": "Мета",
      "ngo": "НПО",
      "participation": "Гражданско участие",
    }
    return Object.keys(translations).filter(function(key) { return translations[key] === value })[0];
  };
}]);

promeni.filter('countWords', [function() {
  "use strict";
  return function(string) {
    if (typeof string === "undefined" || string === "") {
      return 0;
    }
    return string.split(/\s+/).length;
  };
}]);

promeni.directive('votingButtons', ['Proposal', 'Comment', 'Modal', 'CurrentUser', function(Proposal, Comment, Modal, CurrentUser) {
  return {
    restrict: 'E',
    scope: {
      votable: "=",
      votableType: "@",
      buttonSize: "=?"
    },
    controller: ['$scope', function($scope) {
      $scope.buttonSize = $scope.buttonSize || 'btn-sm';
    }],
    link: function (scope) {

      scope.vote = function(value) {
        var direction = value === 0 ? "up": "down";
        var params = { id: scope.votable.id, vote: direction, votable: scope.votableType };
        var success = function(response) {
          scope.votable.hotness = response.hotness;
          scope.votable.voted = scope.votable.voted === value ? -1 : value;
        }
        var failure = function(response) {
          if (response.statusText == "Unauthorized") {
            Modal.open("unregisteredVote");
          } else {
            Modal.open("unknownError");
          }
        }

        if (CurrentUser.id) {
          if (scope.votableType === "proposal") {
            Proposal.vote(params).$promise.then(success, failure);
          } else {
            Comment.vote(params).$promise.then(success, failure);
          }
        } else {
          Modal.open("unregisteredVote");
        }

      }

    },
    templateUrl: "<%= asset_path('voting_buttons.html') %>"
  };
}]);

// This service is a wrapper of the ui.bootstrap's $modal service.
// The 'open' method returns a promise which is fulfilled when the
// user clicks 'ok' (blue) and rejected when he/she clicks 'cancel' (white)
promeni.service('Modal', ['$modal', function($modal) {

  var texts = {
    unknownError: {
      title: "Опа!",
      body: "Изглежда тази операция не работи за сега. Моля да ни извините!",
      okButton: "От мен да мине.",
      cancelButton: "Скрий"
    },
    unregisteredVote: {
      title: "Чакай малко!",
      body: "Само регистрирани потребители могат да гласуват.",
      okButton: "Ясно, разбрах.",
      cancelButton: "Скрий"
    },
    destroyComment: {
      title: "Бърз въпрос.",
      body: "Този коментар нещо не ти харесва. Ще го изтриеш ли?",
      okButton: "Вярно е, не ми харесва.",
      cancelButton: "Нека живее."
    },
    destroyProposal: {
      title: "Бърз въпрос.",
      body: "Абе, сигурен(на) ли си, че искаш да изтриеш това предложение?",
      okButton: "Ами да.",
      cancelButton: "Не, размислих."
    },
    proposalNotFound: {
      title: "Странно",
      body: "Не можем да намерим това предложение. Сигурен/на ли си, че си на правилния адрес? За твоята безопасност, ще те пренасочим към всички предложения.",
      okButton: "Добре",
      cancelButton: "Имам ли избор..."
    }
  };

  this.open = function(msgKey) {
    return $modal.open({
      templateUrl: "<%= asset_path('modal.html') %>",
      controller: ["$scope", function($scope) {
        $scope.text = texts[msgKey];
      }]
    }).result;
  }

}]);

// this very simple directive has only one function -
// listen for changes in the given string and update it
// converting with the 'showdown' library.
promeni.directive('markdown', [function() {
  var converter = new Showdown.converter();

  return {
    restrict: 'E',
    scope: {
      content: "="
    },
    link: function(scope, element, attrs) {
      if (typeof scope.content !== "undefined") {
        element.html(converter.makeHtml(scope.content));
      }

      scope.$watch('content', function(newValue, oldValue) {
        if (newValue === oldValue) return;
        element.html(converter.makeHtml(scope.content));
      });
    }
  }
}]);


// The 'more' button is a directive that collects more of comments/proposals/users
promeni.directive("moreButton", ["Comment", "Proposal", "User", "Modal", function(Comment, Proposal, User, Modal) {
  return {
    restrict: "E",
    scope: {
      collection: "=",
      collectionType: "@",
      order: "@",
      userId: "@",
      rank: "@",
      nextPage: "@"
    },
    template: "<button class='btn btn-default' ng-disabled='disabled' ng-click='getMore()'>{{ text }}</button>",
    link: function(scope, element) {

      scope.disabled = false;
      scope.text = "Дай ОЩЕ!";

      var success = function(response) {
        scope.collection = scope.collection.concat(response[scope.collectionType+"s"]);

        scope.disabled = false;
        scope.text = "Дай ОЩЕ!";
        scope.nextPage = parseInt(scope.nextPage) + 1;
      }

      var failure = function(data) {
        Modal.open('unknownError');
      }

      scope.getMore = function() {
        var params = {
          page: scope.nextPage
        };
        var moreable;

        if (typeof scope.userId !== "undefined") {
          params.user_id = scope.userId;
        }
        if (typeof scope.rank !== "undefined") {
          params.rank = scope.rank;
        }

        scope.disabled = true;
        scope.text = "Пуф Паф!";

        Moreable =
          scope.collectionType === "proposal" ? Proposal :
          scope.collectionType === "comment"  ? Comment :
          /* else */                            User;

        Moreable.query(params).$promise.then(success, failure);
      }

    }
  }
}]);

// flag button is used for flagging comments and proposals
promeni.directive("flagButton", ["Comment", "Proposal", "Modal", function(Comment, Proposal, Modal) {
  return {
    restrict: "E",
    templateUrl: "<%= asset_path('flag_button.html') %>",
    scope: {
      flaggable: "=",
      type: "@",
      size: "@"
    },
    link: function(scope) {
      scope.flag = function(flaggable, reason) {
        var Flaggable = scope.type === "proposal" ? Proposal : Comment;
        Flaggable.flag({ flaggable_id: flaggable.id, reason: reason, flaggable_type: scope.type }).$promise.then(function(data) {
          flaggable.alerts = [{
            type: "success", msg: "Вие докладвахте този коментар. Благодарим ви."
          }];
        }, function() { Modal.open("unknownError") });
      }
    }
  }
}]);

promeni.directive("filter", [function() {
  return {
    restrict: "E",
    templateUrl: "<%= asset_path('filter.html') %>",
    transclude: true,
    scope: {
      order: "=",
    }
  }
}]);

