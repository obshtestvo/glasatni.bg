//= depend_on_asset proposals.html
//= depend_on_asset proposal.html
//= depend_on_asset voting_buttons.html

var promeni = angular.module('promeni', ['ngResource', 'ngRoute', 'ui.bootstrap']);

promeni.config(['$routeProvider', function($routeProvider) {
  $routeProvider.when("/", {
    controller: "ProposalIndexController",
    templateUrl: "<%= asset_path('proposals.html') %>",
    resolve: {
      data: ProposalIndexController.loadProposals
    }
  }).when("/proposals/new", {
    controller: "ProposalCreateController",
    templateUrl: "<%= asset_path('proposal_form.html') %>"
  }).when("/users/:id", {
    controller: "UserShowController",
    templateUrl: "<%= asset_path('user.html') %>"
  }).when("/themes/:id", {
    controller: "ThemeController",
    templateUrl: "<%= asset_path('theme.html') %>"
  }).when("/ranks/:rank", {
    controller: "UserIndexController",
    templateUrl: "<%= asset_path('rank.html') %>"
  }).when("/proposals/:id", {
    controller: "ProposalShowController",
    templateUrl: "<%= asset_path('proposal.html') %>"
  }).when("/proposals/:id/edit", {
    controller: "ProposalEditController",
    templateUrl: "<%= asset_path('proposal_form.html') %>",
  }).when("/:theme/:order", {
    controller: "ProposalIndexController",
    templateUrl: "<%= asset_path('proposals.html') %>",
    resolve: {
      data: ProposalIndexController.loadProposals
    }
  }).when("/home", {
    templateUrl: "<%= asset_path('home.html') %>",
  }).when("/:theme/:order/:page", {
    controller: "ProposalIndexController",
    templateUrl: "<%= asset_path('proposals.html') %>",
    resolve: {
      data: ProposalIndexController.loadProposals
    }
  }).otherwise({
    // TODO Error page
    redirectTo: "/"
  });
}]);

promeni.filter('translateOrder', [function () {
  "use strict";
  return function (string) {
    var translations = {
      "newest": "Най-нови",
      "oldest": "Най-стари",
      "relevance": "Най-подкрепени",
      "most-comments": "Коментирани",
      "least-comments": "Некоментирани",
    }
    return translations[string];
  };
}]);

promeni.filter('translateTheme', [function () {
  "use strict";
  return function (value) {
    var translations = {
      "education": "Гражданско образование",
      "volunteering": "Доброволчество",
      "meta": "Мета",
      "ngo": "НПО",
      "participation": "Гражданско участие",
    }
    return Object.keys(translations).filter(function(key) { return translations[key] === value })[0];
  };
}]);

promeni.filter('countWords', [function() {
  "use strict";
  return function(string) {
    if (typeof string === "undefined" || string === "") {
      return 0;
    }
    return string.split(/\s+/).length;
  };
}]);

promeni.directive('votingButtons', ['Proposal', 'Comment', function(Proposal, Comment) {
  return {
    restrict: 'E',
    scope: {
      votable: "=",
      votableType: "@",
      buttonSize: "=?"
    },
    controller: ['$scope', function($scope) {
      $scope.buttonSize = $scope.buttonSize || 'btn-sm';
    }],
    link: function (scope) {

      scope.vote = function(value) {
        var direction = value === 0 ? "up": "down";
        var params = { id: scope.votable.id, vote: direction, votable: scope.votableType };
        var success = function(response) {
          scope.votable.hotness = response.hotness;
          scope.votable.voted = scope.votable.voted === value ? -1 : value;
        }
        var failure = function(response) {
          if (response.statusText == "Unauthorized") {
            scope.$root.$modalMessages = {
              title: "Чакай малко!",
              body: "Само регистрирани потребители могат да гласуват.",
              button: "Ясно, разбрах."
            }
          } else {
            scope.$root.$modalMessages = {
              title: "Опа!",
              body: "Изглежда, че гласуването не работи по някаква причина. Моля да ни извините!",
              button: "От мен да мине."
            }
          }
          angular.element("#whoops-box").modal();
        }

        if (scope.votableType === "proposal") {
          Proposal.vote(params).$promise.then(success, failure);
        } else {
          Comment.vote(params).$promise.then(success, failure);
        }
      }

    },
    templateUrl: "<%= asset_path('voting_buttons.html') %>"
  };
}]);

promeni.directive('markdown', [function() {
  var converter = new Showdown.converter();

  return {
    restrict: 'E',
    scope: {
      content: "="
    },
    link: function(scope, element, attrs) {
      if (typeof scope.content !== "undefined") {
        element.html(converter.makeHtml(scope.content));
      }

      scope.$watch('content', function(newValue, oldValue) {
        if (newValue === oldValue) return;
        element.html(converter.makeHtml(scope.content));
      });
    }
  }
}]);

promeni.directive("moreButton", ["Comment", "Proposal", function(Comment, Proposal) {
  return {
    restrict: "E",
    scope: {
      collection: "=",
      collectionType: "@",
      order: "@",
      userId: "@",
      nextPage: "@"
    },
    template: "<button class='btn btn-default' ng-disabled='disabled' ng-click='getMore()'>{{ text }}</button>",
    link: function(scope, element) {

      scope.disabled = false;
      scope.text = "Дай ОЩЕ!";

      var success = function(response) {
        scope.collection = scope.collection.concat(response[scope.collectionType+"s"]);

        scope.disabled = false;
        scope.text = "Дай ОЩЕ!";
      }

      var failure = function(data) {
      }

      scope.getMore = function() {
        scope.disabled = true;
        scope.text = "Пуф Паф!";

        var params = {
          page: scope.nextPage
        };

        if (typeof scope.userId !== "undefined") {
          params.user_id = scope.userId;
        }

        if (scope.collectionType === "proposal") {
          Proposal.query(params).$promise.then(success, failure);
          scope.nextPage = parseInt(scope.nextPage) + 1;
        } else {
          Comment.query(params).$promise.then(success, failure);
          scope.nextPage = parseInt(scope.nextPage) + 1;
        }
      }

    }
  }
}]);

promeni.directive("flagButton", ["Comment", "Proposal", function(Comment, Proposal) {
  return {
    restrict: "E",
    templateUrl: "<%= asset_path('flag_button.html') %>",
    scope: {
      flaggable: "=",
      type: "@",
      size: "@"
    },
    link: function(scope) {
      scope.flag = function(flaggable, reason) {
        var Flaggable = scope.type === "proposal" ? Proposal : Comment;
        Flaggable.flag({ flaggable_id: flaggable.id, reason: reason, flaggable_type: scope.type }).$promise.then(function(data) {
          flaggable.alerts = [{
            type: "success", msg: "Вие докладвахте този коментар. Благодарим ви."
          }];
        });
      }
    }
  }
}]);

promeni.directive("filter", [function() {
  return {
    restrict: "E",
    templateUrl: "<%= asset_path('filter.html') %>",
    transclude: true,
    scope: {
      order: "=",
    }
  }
}]);

