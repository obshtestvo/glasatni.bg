//= depend_on_asset comment.html
//= depend_on_asset comment_actions.html

promeni.factory('Comment', ['$resource', function($resource) {
  return $resource('/api/v1/comments/:id', null, {
    'query': { method:'GET', isArray: false },
    'vote': { method: "POST", url: "/vote" },
    'flag': { method: "POST", url: "/flag"}
  });
}]);

promeni.service("commentService", ["Comment", function(Comment) {

  this.query = function(params) {
    return Comment.query(params);
  }

  this.save = function(params) {
    return Comment.save(params);
  }

  this.delete = function(params) {
    return Comment.delete(params);
  }

  this.flag = function(params) {
    return Comment.flag();
  }

  this.vote = function(params) {
    return Comment.vote(params);
  }

}]);

promeni.controller('CommentCreateController', ["$scope", "commentService" , function($scope, commentService) {

  $scope.logged_in = $("#logged_in").length !== 0 ? true : false;

  $scope.showWarning = function() {
    $("#warning-box").slideDown();
    $("#comment-box").attr("rows", 8);
  }

  $scope.newComment = { content: "" };

  $scope.createNewComment = function() {
    var params = {
      commentable_id: $scope.proposal.id,
      commentable_type: "proposal",
      content: $scope.newComment.content
    };
    commentService.save(params).$promise.then(function(comment) {
      $scope.comments.unshift(comment);

      $("#warning-box").slideUp();
      $("#comment-box").attr("rows", 3);
      $scope.newComment = { content: "" };
    });
  }

}]);

promeni.controller('CommentIndexController', ["$scope", "commentService" , function($scope, commentService) {
  var getCommentsData = function() {
    var params = angular.copy($scope.params);
    params.commetable_type = "proposal";

    commentService.query(params).$promise.then(function(data) {
      $scope.comments = data.comments;
      $scope.commentsCount = data.comments_count;
    });
  }

  $scope.params = {
    order: "relevance",
    page: 1
  }

  $scope.$watchCollection("[params.order, params.page]", function(newValue, oldValue) {
    if (newValue === oldValue) return;
    getCommentsData();
  });

  getCommentsData();

}]);

promeni.directive('commentSection', ["commentService", function(commentService) {
  return {
    restrict: 'E',
    scope: {
      comment: "=",
    },
    link: function(scope) {

      scope.cancelNewNestedComment = function() {
        scope.comment.reply = "";
        scope.comment.showReplyBox = false;
      }

      scope.replyToComment = function() {
        commentService.save({ commentable_id: scope.comment.id, commentable_type: "comment", content: scope.comment.reply }).$promise.then(function(reply) {
          commentService.query({ commentable_id: scope.comment.id, commentable_type: "comment", order: "relevance" }).$promise.then(function(data) {
            scope.comment.comments = data.comments;
            scope.comment.commentsCount = data.comments_count;
          });

          scope.comment.reply = "";
          scope.comment.showReplyBox = false;
        });
      }

      scope.closeAlert = function(comment) {
        comment.alerts = [];
      }

    },
    templateUrl: "<%= asset_path('comment.html') %>"
  }
}]);

promeni.directive('commentActions', ['commentService', function(commentService) {
  return {
    restrict: 'E',
    templateUrl: "<%= asset_path('comment_actions.html') %>",
    scope: {
      comment: "=",
      nested: "=?"
    },
    controller: ['$scope', function($scope) {
      $scope.nested = $scope.nested || false;
    }],
    link: function(scope) {

      scope.flag = function(comment, reason) {
        commentService.flag(comment, reason).$promise.then(function(data) {
          comment.alerts = [{
            type: "success", msg: "Вие докладвахте този коментар. Благодарим ви."
          }];
        });
      }

      scope.destroyComment = function(comment) {
        commentService.delete({ id: comment.id }).$promise.then(function(data) {
          commentService.query({ commentable_type: "proposal", order: "newest" }).$promise.then(function(data) {
            scope.proposal.comments = data.comments;
            scope.proposal.commentsCount = data.comments_count;
          });
        });
      }

      scope.showNestedComments = function(comment) {
        commentService.query({ commentable_id: comment.id, commentable_type: "comment", order: "newest" }).$promise.then(function(data) {
          comment.comments = data.comments;
          comment.commentsCount = data.comments_count;
        });
      }

    }
  }
}]);

